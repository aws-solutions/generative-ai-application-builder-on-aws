"use strict";
/**********************************************************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                                                *
 *                                                                                                                    *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance    *
 *  with the License. A copy of the License is located at                                                             *
 *                                                                                                                    *
 *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *
 *                                                                                                                    *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *
 *  and limitations under the License.                                                                                *
 *********************************************************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
const storage_operation_builder_1 = require("../../ddb/storage-operation-builder");
const storage_view_builder_1 = require("../../ddb/storage-view-builder");
const list_use_cases_1 = require("../../model/list-use-cases");
const use_case_1 = require("../../model/use-case");
const constants_1 = require("../../utils/constants");
const event_test_data_1 = require("../event-test-data");
describe('When creating StackCommandBuilders', () => {
    let createEvent;
    let updateEvent;
    let deleteEvent;
    let permanentDeleteEvent;
    beforeAll(() => {
        process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR] = 'UseCaseTable';
        createEvent = event_test_data_1.createUseCaseEvent;
        createEvent.body = JSON.stringify(event_test_data_1.createUseCaseEvent.body);
        updateEvent = event_test_data_1.updateUseCaseEvent;
        updateEvent.body = JSON.stringify(event_test_data_1.updateUseCaseEvent.body);
        deleteEvent = event_test_data_1.deleteUseCaseEvent;
        permanentDeleteEvent = event_test_data_1.permanentlyDeleteUseCaseEvent;
    });
    describe('When creating PutItemCommandInputBuilder with a UseCase', () => {
        let putItemCommandBuilder;
        beforeAll(async () => {
            const cfnParameters = new Map();
            cfnParameters.set('LLMProviderName', 'HuggingFace');
            cfnParameters.set('LLMProviderModelId', 'google/flan-t5-xxl');
            const useCase = new use_case_1.UseCase('fake-id', 'fake-test', 'Create a stack for test', cfnParameters, createEvent.body, 'test-user', 'fake-template-name', 'Chat');
            useCase.stackId = 'fake-stack-id';
            const putItemInputBuilder = new storage_operation_builder_1.PutItemCommandInputBuilder(useCase);
            try {
                putItemCommandBuilder = await putItemInputBuilder.build();
            }
            catch (error) {
                console.error(`Error occurred, error is ${error}`);
            }
        });
        it('should create a PutItemCommandInputBuilder with the correct properties', () => {
            expect(putItemCommandBuilder.TableName).toEqual(process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR]);
            expect(putItemCommandBuilder.Item.StackId.S).toEqual('fake-stack-id');
            expect(putItemCommandBuilder.Item.Name.S).toEqual('fake-test');
            expect(putItemCommandBuilder.Item.Description.S).toEqual('Create a stack for test');
            expect(putItemCommandBuilder.Item.CreatedBy.S).toEqual('test-user');
        });
    });
    describe('When creating UpdateItemCommandBuilder with a UseCase', () => {
        let updateItemCommandInput;
        beforeAll(async () => {
            const cfnParameters = new Map();
            cfnParameters.set('LLMProviderName', 'HuggingFace');
            cfnParameters.set('LLMProviderModelId', 'google/flan-t5-xxl');
            const useCase = new use_case_1.UseCase('fake-id', 'fake-test', 'Create a stack for test', cfnParameters, updateEvent.body, 'test-user', 'fake-template-name', 'Chat');
            useCase.stackId = 'fake-stack-id';
            try {
                updateItemCommandInput = await new storage_operation_builder_1.UpdateItemCommandBuilder(useCase).build();
            }
            catch (error) {
                console.error(`Error occurred, error is ${error}`);
            }
        });
        it('should have the following properties', () => {
            expect(updateItemCommandInput.TableName).toEqual(process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR]);
            expect(updateItemCommandInput.Key).toEqual({ 'UseCaseId': { 'S': 'fake-id' } });
            expect(updateItemCommandInput.UpdateExpression).toEqual('SET #Description = :description, #UpdatedDate = :date, #UpdatedBy = :user, #SSMParameterKey = :ssm_parameter_key');
            expect(updateItemCommandInput.ExpressionAttributeNames).toEqual({
                '#Description': 'Description',
                '#SSMParameterKey': 'SSMParameterKey',
                '#UpdatedDate': 'UpdatedDate',
                '#UpdatedBy': 'UpdatedBy'
            });
        });
    });
    describe('When creating DeleteItemCommandBuilder with a UseCase', () => {
        let deleteCommandInput;
        beforeAll(async () => {
            const useCase = new use_case_1.UseCase('fake-id', 'fake-test', 'Create a stack for test', new Map(), deleteEvent.body, 'test-user', 'fake-template-name', 'Chat');
            useCase.stackId = 'fake-stack-id';
            try {
                deleteCommandInput = await new storage_operation_builder_1.DeleteItemCommandBuilder(useCase).build();
            }
            catch (error) {
                console.error(`Error occurred, error is ${error}`);
            }
        });
        it('should have the following properties', () => {
            expect(deleteCommandInput.TableName).toEqual(process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR]);
            expect(deleteCommandInput.Key.UseCaseId.S).toEqual('fake-id');
        });
    });
    describe('When creating DeleteItemCommandBuilder with a ChatUseCaseInfoAdapter', () => {
        let deleteCommandInput;
        beforeAll(async () => {
            const useCase = new use_case_1.ChatUseCaseInfoAdapter(deleteEvent);
            try {
                deleteCommandInput = await new storage_operation_builder_1.DeleteItemCommandBuilder(useCase).build();
            }
            catch (error) {
                console.error(`Error occurred, error is ${error}`);
            }
        });
        it('should have the following properties', () => {
            expect(deleteCommandInput.TableName).toEqual(process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR]);
            expect(deleteCommandInput.Key.UseCaseId.S).toEqual('11111111-222222222-33333333-44444444-55555555');
        });
    });
    describe('When creating MarkItemForDeletionCommandBuilder with a UseCase', () => {
        let updateItemCommandInput;
        beforeAll(async () => {
            const cfnParameters = new Map();
            cfnParameters.set('LLMProviderName', 'HuggingFace');
            cfnParameters.set('LLMProviderModelId', 'google/flan-t5-xxl');
            const useCase = new use_case_1.UseCase('fake-id', 'fake-test', 'Create a stack for test', cfnParameters, deleteEvent.body, 'test-user', 'fake-template-name', 'Chat');
            useCase.stackId = 'fake-stack-id';
            try {
                updateItemCommandInput = await new storage_operation_builder_1.MarkItemForDeletionCommandBuilder(useCase).build();
            }
            catch (error) {
                console.error(`Error occurred, error is ${error}`);
            }
        });
        it('should have the following properties', () => {
            expect(updateItemCommandInput.TableName).toEqual(process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR]);
            expect(updateItemCommandInput.Key).toEqual({ 'UseCaseId': { 'S': 'fake-id' } });
            expect(updateItemCommandInput.UpdateExpression).toEqual('SET #TTL = :expiry_time, #DeletedBy = :user, #DeletedDate = :deletion_date');
            expect(updateItemCommandInput.ExpressionAttributeNames).toEqual({
                ['#TTL']: constants_1.DYNAMODB_TTL_ATTRIBUTE_NAME,
                ['#DeletedBy']: 'DeletedBy',
                ['#DeletedDate']: 'DeletedDate'
            });
        });
    });
    describe('When creating MarkItemForDeletionCommandBuilder with a ChatUseCaseInfoAdapter', () => {
        let updateItemCommandInput;
        beforeAll(async () => {
            const useCase = new use_case_1.ChatUseCaseInfoAdapter(permanentDeleteEvent);
            try {
                updateItemCommandInput = await new storage_operation_builder_1.MarkItemForDeletionCommandBuilder(useCase).build();
            }
            catch (error) {
                console.error(`Error occurred, error is ${error}`);
            }
        });
        it('should have the following properties', () => {
            expect(updateItemCommandInput.TableName).toEqual(process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR]);
            expect(updateItemCommandInput.Key).toEqual({
                'UseCaseId': { 'S': '11111111-222222222-33333333-44444444-55555555' }
            });
            expect(updateItemCommandInput.UpdateExpression).toEqual('SET #TTL = :expiry_time, #DeletedBy = :user, #DeletedDate = :deletion_date');
            expect(updateItemCommandInput.ExpressionAttributeNames).toEqual({
                ['#TTL']: constants_1.DYNAMODB_TTL_ATTRIBUTE_NAME,
                ['#DeletedBy']: 'DeletedBy',
                ['#DeletedDate']: 'DeletedDate'
            });
        });
    });
    describe('When creating ScanCaseTableCommandBuilder with a UseCase', () => {
        let scanCommandInput;
        beforeAll(async () => {
            process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR] = 'UseCaseTable';
            const event = {
                queryStringParameters: {
                    pageSize: '10'
                }
            };
            try {
                scanCommandInput = await new storage_view_builder_1.ScanCaseTableCommandBuilder(new list_use_cases_1.ListUseCasesAdapter(event)).build();
            }
            catch (error) {
                console.error(`Error occurred, error is ${error}`);
            }
        });
        it('should have the following properties', () => {
            expect(scanCommandInput.TableName).toEqual(process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR]);
            expect(scanCommandInput.Limit).toEqual(constants_1.DDB_SCAN_RECORDS_LIMIT);
        });
    });
    afterAll(() => {
        delete process.env[constants_1.USE_CASES_TABLE_NAME_ENV_VAR];
    });
});
//# sourceMappingURL=data:application/json;base64,