#!/usr/bin/env node
/**********************************************************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                                                *
 *                                                                                                                    *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance    *
 *  with the License. A copy of the License is located at                                                             *
 *                                                                                                                    *
 *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *
 *                                                                                                                    *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *
 *  and limitations under the License.                                                                                *
 *********************************************************************************************************************/

import { CfnParameter } from 'aws-cdk-lib';
import { IConstruct } from 'constructs';

/**
 * Common set of CfnParameters across nested stacks
 */
export class NestedStackParameters {
    public readonly syncCaseTableArn: CfnParameter;
    public readonly syncInferenceS3BucketArn: CfnParameter;
    public readonly orchestratorBusArn: CfnParameter;
    public readonly appNamespace: CfnParameter;
    public readonly uploadBucketArn: CfnParameter;
    public readonly genUUID: CfnParameter;

    constructor(stack: IConstruct) {
        this.syncCaseTableArn = new CfnParameter(stack, 'SyncCaseTableArn', {
            type: 'String',
            description: 'ARN of the DynamoDB table that will store state of jobs',
            allowedPattern: '^arn:(aws|aws-cn|aws-us-gov):dynamodb:\\S+:\\d{12}:table/\\S+$',
            constraintDescription:
                'Please provide arn matching an DynamoDB table arn. The input did not match the validation template'
        });

        this.syncInferenceS3BucketArn = new CfnParameter(stack, 'SyncInferenceS3BucketArn', {
            type: 'String',
            description: 'ARN of the S3 bucket that will store inferences from sync workflows',
            allowedPattern: '^arn:(aws|aws-cn|aws-us-gov):s3:::\\S+$',
            constraintDescription:
                'Please provide arn matching an S3 bucket arn. The input did not match the validation template'
        });

        this.orchestratorBusArn = new CfnParameter(stack, 'OrchestratorBusArn', {
            type: 'String',
            description:
                'ARN of the custom eventBridge bus where the stepfunction will retrieve event from and publish events to.',
            allowedPattern: '^arn:(aws|aws-cn|aws-us-gov):events:\\S+:\\d{12}:event-bus/\\S+$',
            constraintDescription:
                'Please provide arn matching an EventBridge bus arn. The input did not match the validation template'
        });

        this.appNamespace = new CfnParameter(stack, 'AppNamespace', {
            type: 'String',
            description:
                'Namespace for this app, which will be used as the source when publishing to the orchestrator event bus',
            allowedPattern: '^\\S+$',
            constraintDescription: 'AppNamespace should be passed down from the parent stack'
        });

        this.uploadBucketArn = new CfnParameter(stack, 'UploadBucketArn', {
            type: 'String',
            description: 'ARN of the S3 bucket that will store uploaded documents',
            allowedPattern: '^arn:(aws|aws-cn|aws-us-gov):s3:::\\S+$',
            constraintDescription:
                'The AI service (eg Textract or Comprehend) will assume role of lambda. So the lambda requires read access to the bucket'
        });

        this.genUUID = new CfnParameter(stack, 'GenUUID', {
            type: 'String',
            description: 'UUID generated in the parent stack that can be used to append to resource logical ids',
            allowedPattern: '^\\S+$',
            constraintDescription: 'A UUID generated by the custom resource in the parent stack'
        });
    }
}
