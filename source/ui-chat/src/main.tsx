// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import ReactDOM from 'react-dom/client';
import { Amplify, ResourcesConfig } from 'aws-amplify';
import './styles.css';
import './i18n/i18n';
import { Provider } from 'react-redux';
import { setupStore } from './store/store.ts';
import { App } from './App.tsx';
import { NotificationContextProvider } from './contexts/NotificationContext.tsx';
import { SplitPanelContextProvider } from './contexts/SplitPanelContext.tsx';
import { ToolsContextProvider } from './contexts/ToolsContext.tsx';
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import { UserProvider } from './contexts/UserContext.tsx';
import { setRuntimeConfig } from './store/configSlice.ts';

/**
 * Read the configuration .json file that was generated by the custom resource during deployment.
 * If running in development mode, also enable mock-service-worker to intercept defined http requests.
 */
const getRuntimeConfig = async () => {
    let runtimeConfig: any = {};
    try {
        const response = await fetch('/runtimeConfig.json');
        runtimeConfig = await response.json();
    } catch (e) {
        console.log(e);
    }

    return runtimeConfig;
};

getRuntimeConfig().then((json) => {
    const awsconfig: ResourcesConfig = {
        Auth: {
            Cognito: {
                userPoolId: json.UserPoolId,
                userPoolClientId: json.UserPoolClientId,
                loginWith: {
                    oauth: {
                        domain: json.CognitoDomain,
                        scopes: ['openid', 'aws.cognito.signin.user.admin', 'email'],
                        redirectSignIn: [json.CognitoRedirectUrl],
                        redirectSignOut: [json.CognitoRedirectUrl],
                        responseType: 'code'
                    }
                }
            }
        },
        API: {
            REST: {
                'solution-api': {
                    endpoint: json.RestApiEndpoint
                }
            }
        }
    };
    Amplify.configure(awsconfig);

    const store = setupStore();
    store.dispatch(setRuntimeConfig(json));

    // Set window.global to window.globalThis to ensure global object compatibility
    // This is needed for certain libraries that expect a global object to be available
    window.global = window.globalThis;

    const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);

    root.render(
        <React.StrictMode>
            <BrowserRouter>
                <Provider store={store}>
                    <NotificationContextProvider>
                        <ToolsContextProvider>
                            <UserProvider>
                                <SplitPanelContextProvider>
                                    <App />
                                </SplitPanelContextProvider>
                            </UserProvider>
                        </ToolsContextProvider>
                    </NotificationContextProvider>
                </Provider>
            </BrowserRouter>
        </React.StrictMode>
    );
});
